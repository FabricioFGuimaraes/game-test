-> Question 1

local function releaseStorage(player)
	player:setStorageValue(1000, -1)
end

function onLogout(player)
	if player:getStorageValue(1000) == 1 then
		addEvent(releaseStorage, 1000, player)
	end
	return true
end

-> Answer 1

-- CONSTANTS
local STORAGE_ID = 1000
local MILISECONDS_TIME = 1000

-- Assuming that this method disables storage on logout
local function releaseStorage(player)
	player:setStorageValue(STORAGE_ID, -1)
end

function onLogout(player)
	-- Register a event to execute in MILISECONDS_TIME if storageValue == 1 
	if player:getStorageValue(STORAGE_ID) == 1 then
		addEvent(releaseStorage, MILISECONDS_TIME, player)
	end
	--return true -- this is useless on this exercice context
end

===========================================================================================================================
-> Question 2

function printSmallGuildNames(memberCount)
	-- this method is supposed to print names of all guilds that have less than memberCount max members
	local selectGuildQuery = "SELECT name FROM guilds WHERE max_members < %d;"
	local resultId = db.storeQuery(string.format(selectGuildQuery, memberCount))
	local guildName = result.getString("name")
	print(guildName)
end

-> Answer 2

function printSmallGuildNames(memberCount)
    -- this method is supposed to print names of all guilds that have less than memberCount max members
    
    -- Construct a SQL query, embeding the memberCount parameter directly into query string. This approach is safer and more readable.
    local selectGuildQuery = string.format("SELECT name FROM guilds WHERE max_members < %d", memberCount)
    local resultId = db.storeQuery(selectGuildQuery)
    
    if resultId then -- Check if the result is valid
        repeat
            local guildName = result.getString(resultId, "name")
            print(guildName)
        until not result.next(resultId)
        
        result.free(resultId) -- Free the result object to avoid memory leaks
    end
end

===========================================================================================================================
-> Question 3

function do_sth_with_PlayerParty(playerId, membername)
	player = Player(playerId)
	local party = player:getParty()

	for k,v in pairs(party:getMembers()) do 
		if v == Player(membername) then 
			party:removeMember(Player(membername))
		end
	end
end

-> Answer 3

function removeMemberFromPlayerParty(playerId, memberId)-- change the method name and parameters for better reading
    local player = Player(playerId)
    local party = player:getParty()
    if not party then return end  -- Exit if player doesn't have a party

    local partyMembers = party:getMembers()-- make party members a local variable to improve performance
    for index, partyPlayer in pairs(partyMembers) do -- Interate party players, remove when find it
        if partyPlayer:getId() == memberId then
            party:removeMember(partyPlayer)
            return  -- Exit the function once the member is removed
        end
    end
end

===========================================================================================================================
-> Question 4

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
	Player* player = g_game.getPlayerByName(recipient);
	
	if (!player) {
		player = new Player(nullptr);
		if (!IOLoginData::loadPlayerByName(player, recipient)) {
			return;
		}
	}

	Item* item = Item::CreateItem(itemId);
	if (!item) {
		return;
	}

	g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

	if (player->isOffline()) {
		IOLoginData::savePlayer(player);
	}
}

-> Answer 4

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
	Player* player = g_game.getPlayerByName(recipient);
	bool playerCreated = false; // Setting a bool var if player was created inside this method
	
	if (!player) {
		player = new Player(nullptr);
		if (!IOLoginData::loadPlayerByName(player, recipient)) {
			delete player; // delete player pointer before return
			return;
		}
		playerCreated = true; // Means that player was created
	}

	Item* item = Item::CreateItem(itemId);
	if (!item) {
		if (playerCreated) delete player; // here we just need delete the pointer if the player was created
		return;
	}

	g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

	if (player->isOffline()) {
		IOLoginData::savePlayer(player);
	}
	
	if (playerCreated) delete player; // here we just need delete the pointer if the player was created
    delete item; // delete the item pointer assuming that it was created inside this method
}